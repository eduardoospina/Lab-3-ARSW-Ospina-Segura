Parte I

    Punto 1:

    - El comsumo de CPU empieca cuando en la clase de StarProduction.java cuando crea una nueva cola y a esa cola se la manda
      a producer junto con el max value de la clase long. en donde se crea un hilo de producer responsable por en un ciclo infinito
      de asigarle el siguiente valor a dataseed y agregarlo a la cola. teniendo un tiempo de espera de 1000 milisengundos. en el momento que
      se inicia el hilo de comsumer, toma inmediatamente todos los elementos de la cola y los comsume, no cuenta ocn iempo de espere y apenas
      se agrega a la cola, es comsumido. al ser un ciclo infinito de agregar y eliminar de la cola genera que el gaste de CPU se comport de
      la manera que lo hace, teniendo picos y oscilando entre un rango statitoc nunca subiendo ni bajando de este. junto con la implementacion
      de un cicloinfinito que por si ya es un comsumo elevado en CPU.

Parte I

    Punto 2:

    - Para reducir el consume de CPU nos dimos cuenta que la clase de Comsumer.java no llegaba a tener tiempos de espera cada vez que queria
      comsumir de la cola, por lo que cada vez que se agregaba un objeto a la cola comsumer lo comsumia directamente, sin contar las 5 primero segundos
      de ventaja que tiene el hilo de producer. por lo que al implementar tiempos de espera dentro de los while infinitos permite relentizar la
      operacion de comsumo de lo producido, normalizando las operaciones de los hilos y reduciendo el comsumo de CPU de una manera muy elevada.
      en el caso contrario de remover las esperas dentro de los ciclos infinitos causaria que el comsumo de CPU se incremente exponencialmente.

Parte I

    Punto 3:

    -Para hacer que el productor produzca rapido y que el consumidor consuma lento, hay que hacer que el productr tenga un tiempo
    de espera menor que el consumidor. Para hacer que se respete el limite del stock de la colleccion, hay que usar el constructor de
    la colleccion que recibe como parametro un entero, este entero representa el limite de objetos que puede guardar la colleccion.

Parte II

    -Para hacer que sea mas eficiente la busqueda se puede tener un contador que sume de manera sincronizada cada vez que un hilo encuentra
    el host en una de las listas negras, y luego dentro del ciclo For, en el cual el hilo se encarga de verificar que el host no este e el subconjunto
    de listas negras, se agrega un condicional que verifique si ya se encontraron el numero de apariciones que hay como limite, si se cumple esta condicion
    hay que hacer que se pare la busqueda de los hilos, como se muestra en el codigo adjunto del laboratorio 1.

Parte III

    Punto 2
    
    -La funcionalidad anteriormente mencionada se implemento de manera que se crean el numero de inmortales que el usuario desee, todos con un valor de vida prestablecido
    pero en el momento en que los inmortales empiezan a pelear, no se tiene en cuenta condiciones de carrera, por lo cual no se realiza de manera adecuada la operacion de
    restar y sumar vida, causando que la suma total de vida siempre este aumentando y que nunca llegue a morir ninguno de los inmortales.

    -Para calcular el valor del invariante, siendo este que cambia en relacion con el numero de jugadores "N" (en este caso 3) que se vaya a usar, este invariante seria el numero
    de jugadores "N" multiplicado por la constante estatica DEFAULT_IMMORTAL_HEALTH (en este caso 100), debido a esto el valor del invariante para este caso deberia ser 3*100

    Punto 3
    -La opcion de "pause and check" itera sobre la lista que contiene a los inmortales y suma la vida de todos estos e imprime la vida de cada inmortal y
    sumatoria total de vida de todos estos, sin embargo no pausa el juego, ya que en la implementacion no se ha añadido dicha funcion y solo se devuelve la suma
    total de vida de los inmortales.

    punto 4:
    - para correguir el error nos toco cambiar varias partes para que la implementacion del pause y check funcionara como deberia. ya que e un principio
    encontramos muchos errores de las condiciones de carrera que generaba que se nos bloqueara completamente el codigo y no se pudiera implementar de la manera correcta.
    por lo que nos toco agregar de manera synchronizada un metodo y unos condicionales que permiten su funcionamiento ordenado. Y al implementar permite su correcto uso.

    Punto 5:
    -El invarianteno se cumple, en ocasiones se excede el nivel de vida total que deberian tener los inmortales y en ocasiones
    la suma de vida es menor a la que deberia ser, ya que aunque deja pausarlo aun no corregimos la forma en como cada hilo de immortales
    roba de manera libre y pelea constantemente al mismo tiempo con varios immortales.

    Punto 6:
    -Las posibles regiones criticas son parte del metodo run, en donde se escogia el inmortal contra el que se iba a pelear y se efectuaba la pelea entre dos inmortales, el
    metodo changeHealth y el metodo getHealth.

    punto 7:
    - evidencia en imagenes.

    punto 8:
    - la estrategia implementada para solucionar todo esto fue la de sincronizar todos estos elementos elementos que funcionan de manera concurrente y que modificaban los
    valores de la vida de de los immortales, y al incluir el correcto manejo del pause and check y resume se corriguen estos errores y permite que el programa corra como se desea.

    punto 9:
    - evidencia se ncuentra en los s5 a s9 en la carpeta de img.

    punto 10:
    - al suprimir a los immortales de la lista, se p´resenta una condicion de carrera ya que puede ocurrir que cuando se este eliminando a un immortal puede que otro esta accediendo a
    sus variables lo que genera que s ebloquee el programa, por lo que decidimos implementar una nueva lista en donde se van guardando los muertos y cuanod muere pro primera vez se guarda y
    se le dice que lo ignore para no pelear con el nuevamente una vez ya esta muerto. 

    punto 11:
    - se implementa el actionlistener de stop siguiendo los mismo pasos que para el pause, pero acabando y terminando el programa completamente, agregando un nuevo condicional
    en el recorrido de cada uno de los hilos en sus respectivos run.
